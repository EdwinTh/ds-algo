---
title: 'Chapter 1 exercises'
format: 
  html:
    css: funda-winter.css
jupyter: python3
---

### R-1.1 

Write a short python program `is_multiple`

```{python}
def is_multiple(n, m):
    return m % n == 0
```

### R-1.2

Write a short python program `is_even` you can't use multiplication, division or modulo.

```{python}
def is_even(k):
    return str(k)[-1] in ('0','2','4','6','8')
```

### R-1.3

Write `minmax(data)` function, not using `min` and `max` functions.

```{python}
def minmax(data):
    min_val = data[0]
    max_val = data[0]
    for d in data:
        min_val = min_val if min_val < d else d
        max_val = max_val if max_val > d else d
    return (min_val, max_val)
```

### R-1.4 / R-1.5

Write a short function that takes an integer n and the returns the sum of squares of all integers smaller than n.

```{python}
def sum_of_squares(n):
    return sum([val**2 for val in range(n)])
```

### R-1.6 / R-1.7

Same as **R-1.4** but for oneven numbers only

```{python}
def sum_of_squares_uneven(n):
    return sum([val**2 for val in range(n) if val % 2 == 1])
```

### R-1.8

If string **s** has length **n** what is the equivalent  of positive **j** for negative **k**. Answer: **j** = abs(**k**) - 1

### R-1.9

What parameters should be sent to the range constructor to get 50, 60, 70, 80

```{python}
range(50, 90, 10)
```

### R-1.10

```{python}
range(8, -10, -2)
```

### R-1.11

```{python}
[2**x for x in range(9)]
```

### R-1.12

```{python}
from random import randrange
def my_choice(data):
    return data[randrange(len(data))]
```

### C-1.13 

Write pseudo-code to reverse a list:

```{python}
def reverse_list(l):
  return [l[i] for i in range(len(l)-1,-1,-1)]
```

### C-1.14

Write a short python program that takes a sequence of integers and determine if there is a distinct pair of numbers whose product is odd:

```{python}
def has_odd_product(seq):
  odd = []
  for nr in seq:
    if nr % 2 == 1:
      odd.append(nr)
    if len(odd) > 1:
      return True
  return False
```

### C-1.15

Function that determines if all nrs in a sequence are unique.

```{python}
def is_unique(seq):
  return len(seq) == len(set(seq))
```

### C-1.16

In this example it is not a numeric object that is updated, but a list containing numeric objects. The list type is mutable, thus we can update the numeric objects that contains it.

### C-1.17

It would not work this way, because `val` is an identifier in the local scope of the function created by looping through data. It is not directly passed to the function as a parameter and thus is not directly associated with an identifier in the enclosing scope that it will mutate.

### C-1.18

```{python}
[sum(range(0, i+2, 2)) for i in range(0,20,2)]
```

### C-1.19

```{python}
[chr(i) for i in range(ord('a'), ord('a') + 26)]
```

### C-1.20

```{python}
from random import randint
def my_shuffle(seq):
  ind = []
  while len(ind) < len(seq):
    r = randint(0, len(seq) - 1)
    if r not in ind:
      ind.append(r)
  return [seq[i] for i in ind]

my_shuffle(['a', 'a', 'c', 42])
```

### C-1.21

```{python}
from sys import stdin
```

### C-1.22

```{python}
def dotprod(a, b):
  return [a_el * b_el for a_el, b_el in zip(a, b)]
```

### C-1-23

```{python}
def add_el(l, el, i):
  try: 
    l[i] = el
  except:
    raise IndexError("Don't try buffer overflow attacks on python")
    
lt = [1,2,3]
add_el(lt, 1, 4)
```

### C-1.24

```{python}
def count_vowels(s):
  return len([l for l in s if l in 'eaiuo'])

count_vowels("dit is mijn club, mijn ideaal")
```

### C-1.25

```{python}
import re
def remove_punct(s):
  return re.sub('[^a-zA-Z0-9\s]', '', s)
remove_punct("Let's try, Mike.")
```

### C-1.27

Modify the generator such that it is both efficient and prints in right order.

```{python}
def factors(n):
  k = 1
  collect_over_n = []
  while k * k < n:
    if n % k == 0:
      yield k
      collect_over_n.append(n // k)
    k += 1
  if k * k == n:
    yield k
  while len(collect_over_n) > 0:
    yield collect_over_n[-1]
    collect_over_n.pop(-1)
```

### P-1.29

```{python}
s = 'catdog'
from copy import copy
def a_not_in_b(a, b):
  ac = copy(a)
  [ac.remove(el) for el in b]
  return ac

def all_combs(s):
  all_let = list(s)
  collect = [[l] for l in s]
  while len(collect[0]) < len(s):
    for el in collect:
      not_yet_in_el = a_not_in_b(all_let, el)
      collect = collect + [el + [ny] for ny in not_yet_in_el]
      collect.remove(el)
  return ["".join(el) for el in collect]
all_combs('catdog')
```

### P-1.30

```{python}
def div_by_two(i):
  cnt = 0
  while i > 2:
    i = i / 2
    cnt += 1
  return cnt

div_by_two(1000)
```

### P-1.35

Birthday paradox:

```{python}
from random import randint
def simpulate_bday_paradox(n = 20):
  bdays = [randint(0, 365) for i in range(n)]
  return len(set(bdays)) < n
```